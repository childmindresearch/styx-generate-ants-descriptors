{
  "tool-version": "7.4.1",
  "name": "recon-all",
  "author": "FreeSurfer Developers",
  "descriptor-url": "https://github.com/freesurfer/freesurfer",
  "description": "Performs all, or any part of, the FreeSurfer cortical reconstruction process",
  "command-line": "recon-all -subjid [SUBJECT_ID] [DIRECTIVE] [HEMI_FLAG] [SEED_PONS] [SEED_CC] [SEED_LH] [SEED_RH] [NOFILL_FLAG] [WATERSHED_CMD] [XMASK_FILE] [WSLESS_FLAG] [WSMORE_FLAG] [WSATLAS_FLAG] [NO_WSATLAS_FLAG] [NO_WSGCAATLAS_FLAG] [WSTHRESH] [WSSEED] [NORM_3D_ITERS] [NORM_MAX_GRAD] [NORM1_B] [NORM2_B] [NORM1_N] [NORM2_N] [CM_FLAG] [NO_FIX_WITH_GA_FLAG] [FIX_DIAG_ONLY_FLAG] [SEG_WLO] [SEG_GHI] [NOTHICKEN_FLAG] [NO_CA_ALIGN_AFTER_FLAG] [NO_CA_ALIGN_FLAG] [DEFACE_FLAG] [EXPERT_FILE] [XOPTS_USE_FLAG] [XOPTS_CLEAN_FLAG] [XOPTS_OVERWRITE_FLAG] [TERMSCRIPT_FILE] [MPRAGE_FLAG] [WASHU_MPRAGE_FLAG] [SCHWARTZYA3T_ATLAS_FLAG] [THREADS] [WAITFOR_FILE] [NOTIFY_FILE] [LOG_FILE] [STATUS_FILE] [NOAPPEND_FLAG] [NO_ISRUNNING_FLAG] [HIPPOCAMPAL_SUBFIELDS_T1_FLAG] [HIPPOCAMPAL_SUBFIELDS_T2_ID] [HIPPOCAMPAL_SUBFIELDS_T1T2_ID] [BRAINSTEM_STRUCTURES_FLAG] [SD_DIR] [MAIL_USER] [UMASK] [GRP_ID] [ONLYVERSIONS_FLAG] [DEBUG_FLAG] [ALLOW_COREDUMP_FLAG] [DONTRUN_FLAG] [VERSION_FLAG] [HELP_FLAG]",
  "container-image": {
    "type": "docker",
    "image": "freesurfer/freesurfer:7.4.1"
  },
  "schema-version": "0.5",
  "inputs": [
    {
      "description": "Subject ID for the FreeSurfer analysis",
      "value-key": "[SUBJECT_ID]",
      "type": "String",
      "optional": false,
      "id": "subjid",
      "name": "Subject ID"
    },
    {
      "command-line-flag": "-all",
      "description": "Performs all stages of cortical reconstruction",
      "value-key": "[DIRECTIVE]",
      "type": "Flag",
      "optional": true,
      "id": "all_flag",
      "name": "All flag"
    },
    {
      "command-line-flag": "-autorecon-all",
      "description": "Same as -all",
      "value-key": "[DIRECTIVE]",
      "type": "Flag",
      "optional": true,
      "id": "autorecon_all_flag",
      "name": "Autorecon all flag"
    },
    {
      "command-line-flag": "-autorecon1",
      "description": "Process stages 1-5",
      "value-key": "[DIRECTIVE]",
      "type": "Flag",
      "optional": true,
      "id": "autorecon1_flag",
      "name": "Autorecon 1 flag"
    },
    {
      "command-line-flag": "-autorecon2",
      "description": "Process stages 6-23",
      "value-key": "[DIRECTIVE]",
      "type": "Flag",
      "optional": true,
      "id": "autorecon2_flag",
      "name": "Autorecon 2 flag"
    },
    {
      "command-line-flag": "-autorecon2-cp",
      "description": "Process stages 12-23",
      "value-key": "[DIRECTIVE]",
      "type": "Flag",
      "optional": true,
      "id": "autorecon2_cp_flag",
      "name": "Autorecon 2 CP flag"
    },
    {
      "command-line-flag": "-autorecon2-wm",
      "description": "Process stages 15-23",
      "value-key": "[DIRECTIVE]",
      "type": "Flag",
      "optional": true,
      "id": "autorecon2_wm_flag",
      "name": "Autorecon 2 WM flag"
    },
    {
      "command-line-flag": "-autorecon2-inflate1",
      "description": "Process stages 6-18",
      "value-key": "[DIRECTIVE]",
      "type": "Flag",
      "optional": true,
      "id": "autorecon2_inflate1_flag",
      "name": "Autorecon 2 Inflate 1 flag"
    },
    {
      "command-line-flag": "-autorecon2-perhemi",
      "description": "Tessellation, Smooth1, Inflate1, Qsphere, Fix, Smooth2, Inflate2, Finalsurf, Ribbon",
      "value-key": "[DIRECTIVE]",
      "type": "Flag",
      "optional": true,
      "id": "autorecon2_perhemi_flag",
      "name": "Autorecon 2 per hemisphere flag"
    },
    {
      "command-line-flag": "-autorecon3",
      "description": "Process stages 24-34",
      "value-key": "[DIRECTIVE]",
      "type": "Flag",
      "optional": true,
      "id": "autorecon3_flag",
      "name": "Autorecon 3 flag"
    },
    {
      "command-line-flag": "-hemi",
      "description": "Specify hemisphere ('lh' or 'rh')",
      "value-key": "[HEMI_FLAG]",
      "type": "String",
      "optional": true,
      "id": "hemi",
      "name": "Hemisphere"
    },
    {
      "command-line-flag": "-pons-crs",
      "description": "Specify CRS for pons during fill operation",
      "value-key": "[SEED_PONS]",
      "type": "Number",
      "list": true,
      "max-list-entries": 3,
      "optional": true,
      "id": "pons_crs",
      "min-list-entries": 3,
      "name": "Pons CRS"
    },
    {
      "command-line-flag": "-cc-crs",
      "description": "Specify CRS for corpus callosum during fill operation",
      "value-key": "[SEED_CC]",
      "type": "Number",
      "list": true,
      "max-list-entries": 3,
      "optional": true,
      "id": "cc_crs",
      "min-list-entries": 3,
      "name": "Corpus Callosum CRS"
    },
    {
      "command-line-flag": "-lh-crs",
      "description": "Specify CRS for left hemisphere during fill operation",
      "value-key": "[SEED_LH]",
      "type": "Number",
      "list": true,
      "max-list-entries": 3,
      "optional": true,
      "id": "lh_crs",
      "min-list-entries": 3,
      "name": "Left Hemisphere CRS"
    },
    {
      "command-line-flag": "-rh-crs",
      "description": "Specify CRS for right hemisphere during fill operation",
      "value-key": "[SEED_RH]",
      "type": "Number",
      "list": true,
      "max-list-entries": 3,
      "optional": true,
      "id": "rh_crs",
      "min-list-entries": 3,
      "name": "Right Hemisphere CRS"
    },
    {
      "command-line-flag": "-nofill",
      "description": "Do not use automatic subcortical seg to fill",
      "value-key": "[NOFILL_FLAG]",
      "type": "Flag",
      "optional": true,
      "id": "nofill",
      "name": "No Fill Flag"
    },
    {
      "command-line-flag": "-watershed",
      "description": "Control skull stripping/watershed program",
      "value-key": "[WATERSHED_CMD]",
      "type": "String",
      "optional": true,
      "id": "watershed",
      "name": "Watershed Command"
    },
    {
      "command-line-flag": "-xmask",
      "description": "Custom external brain mask file",
      "value-key": "[XMASK_FILE]",
      "type": "File",
      "optional": true,
      "id": "external_brain_mask",
      "name": "External Brain Mask"
    },
    {
      "command-line-flag": "-wsless",
      "description": "Decrease watershed threshold",
      "value-key": "[WSLESS_FLAG]",
      "type": "Flag",
      "optional": true,
      "id": "wsless",
      "name": "WS Less Flag"
    },
    {
      "command-line-flag": "-wsmore",
      "description": "Increase watershed threshold",
      "value-key": "[WSMORE_FLAG]",
      "type": "Flag",
      "optional": true,
      "id": "wsmore",
      "name": "WS More Flag"
    },
    {
      "command-line-flag": "-wsatlas",
      "description": "Use atlas when skull stripping",
      "value-key": "[WSATLAS_FLAG]",
      "type": "Flag",
      "optional": true,
      "id": "wsatlas",
      "name": "WS Atlas Flag"
    },
    {
      "command-line-flag": "-no-wsatlas",
      "description": "Do not use atlas when skull stripping",
      "value-key": "[NO_WSATLAS_FLAG]",
      "type": "Flag",
      "optional": true,
      "id": "no_wsatlas",
      "name": "No WS Atlas Flag"
    },
    {
      "command-line-flag": "-no-wsgcaatlas",
      "description": "Do not use GCA atlas when skull stripping",
      "value-key": "[NO_WSGCAATLAS_FLAG]",
      "type": "Flag",
      "optional": true,
      "id": "no_wsgcaatlas",
      "name": "No WS GCA Atlas Flag"
    },
    {
      "command-line-flag": "-wsthresh",
      "description": "Explicitly set watershed threshold",
      "value-key": "[WSTHRESH]",
      "type": "Number",
      "optional": true,
      "id": "wsthresh",
      "name": "WS Thresh"
    },
    {
      "command-line-flag": "-wsseed",
      "description": "Identify an index (C, R, S) point in the skull",
      "value-key": "[WSSEED]",
      "type": "Number",
      "list": true,
      "max-list-entries": 3,
      "optional": true,
      "id": "wsseed",
      "min-list-entries": 3,
      "name": "WS Seed"
    },
    {
      "command-line-flag": "-norm3diters",
      "description": "Number of 3D iterations for mri_normalize",
      "value-key": "[NORM_3D_ITERS]",
      "type": "Number",
      "optional": true,
      "id": "norm_3d_iters",
      "name": "Norm 3D Iters"
    },
    {
      "command-line-flag": "-normmaxgrad",
      "description": "Max grad for mri_normalize",
      "value-key": "[NORM_MAX_GRAD]",
      "type": "Number",
      "optional": true,
      "id": "norm_max_grad",
      "name": "Norm Max Grad"
    },
    {
      "command-line-flag": "-norm1-b",
      "description": "First usage of mri_normalize with control point intensity N below target",
      "value-key": "[NORM1_B]",
      "type": "Number",
      "optional": true,
      "id": "norm1_b",
      "name": "Norm 1-B"
    },
    {
      "command-line-flag": "-norm2-b",
      "description": "Second usage of mri_normalize with control point intensity N below target",
      "value-key": "[NORM2_B]",
      "type": "Number",
      "optional": true,
      "id": "norm2_b",
      "name": "Norm 2-B"
    },
    {
      "command-line-flag": "-norm1-n",
      "description": "First usage of mri_normalize, number of iterations",
      "value-key": "[NORM1_N]",
      "type": "Number",
      "optional": true,
      "id": "norm1_n",
      "name": "Norm 1-N"
    },
    {
      "command-line-flag": "-norm2-n",
      "description": "Second usage of mri_normalize, number of iterations",
      "value-key": "[NORM2_N]",
      "type": "Number",
      "optional": true,
      "id": "norm2_n",
      "name": "Norm 2-N"
    },
    {
      "command-line-flag": "-cm",
      "description": "Conform volumes to the min voxel size",
      "value-key": "[CM_FLAG]",
      "type": "Flag",
      "optional": true,
      "id": "cm",
      "name": "Conform volumes flag"
    },
    {
      "command-line-flag": "-no-fix-with-ga",
      "description": "Do not use genetic algorithm when fixing topology",
      "value-key": "[NO_FIX_WITH_GA_FLAG]",
      "type": "Flag",
      "optional": true,
      "id": "no_fix_with_ga",
      "name": "No Fix with GA flag"
    },
    {
      "command-line-flag": "-fix-diag-only",
      "description": "Topology fixer runs until ?h.defect_labels files are created",
      "value-key": "[FIX_DIAG_ONLY_FLAG]",
      "type": "Flag",
      "optional": true,
      "id": "fix_diag_only",
      "name": "Fix Diag Only flag"
    },
    {
      "command-line-flag": "-seg-wlo",
      "description": "Set WLO value for mri_segment and mris_make_surfaces",
      "value-key": "[SEG_WLO]",
      "type": "Number",
      "optional": true,
      "id": "seg_wlo",
      "name": "Seg WLO"
    },
    {
      "command-line-flag": "-seg-ghi",
      "description": "Set GHI value for mri_segment and mris_make_surfaces",
      "value-key": "[SEG_GHI]",
      "type": "Number",
      "optional": true,
      "id": "seg_ghi",
      "name": "Seg GHI"
    },
    {
      "command-line-flag": "-nothicken",
      "description": "Pass '-thicken 0' to mri_segment",
      "value-key": "[NOTHICKEN_FLAG]",
      "type": "Flag",
      "optional": true,
      "id": "nothicken",
      "name": "No Thicken flag"
    },
    {
      "command-line-flag": "-no-ca-align-after",
      "description": "Turn off '-align-after' with mri_ca_register",
      "value-key": "[NO_CA_ALIGN_AFTER_FLAG]",
      "type": "Flag",
      "optional": true,
      "id": "no_ca_align_after",
      "name": "No CA Align After flag"
    },
    {
      "command-line-flag": "-no-ca-align",
      "description": "Turn off '-align' with mri_ca_label",
      "value-key": "[NO_CA_ALIGN_FLAG]",
      "type": "Flag",
      "optional": true,
      "id": "no_ca_align",
      "name": "No CA Align flag"
    },
    {
      "command-line-flag": "-deface",
      "description": "Deface subject, written to orig_defaced.mgz",
      "value-key": "[DEFACE_FLAG]",
      "type": "Flag",
      "optional": true,
      "id": "deface",
      "name": "Deface flag"
    },
    {
      "command-line-flag": "-expert",
      "description": "Read-in expert options file",
      "value-key": "[EXPERT_FILE]",
      "type": "File",
      "optional": true,
      "id": "expert_file",
      "name": "Expert File"
    },
    {
      "command-line-flag": "-xopts-use",
      "description": "Use pre-existing expert options file",
      "value-key": "[XOPTS_USE_FLAG]",
      "type": "Flag",
      "optional": true,
      "id": "xopts_use",
      "name": "XOPTS Use flag"
    },
    {
      "command-line-flag": "-xopts-clean",
      "description": "Delete pre-existing expert options file",
      "value-key": "[XOPTS_CLEAN_FLAG]",
      "type": "Flag",
      "optional": true,
      "id": "xopts_clean",
      "name": "XOPTS Clean flag"
    },
    {
      "command-line-flag": "-xopts-overwrite",
      "description": "Overwrite pre-existing expert options file",
      "value-key": "[XOPTS_OVERWRITE_FLAG]",
      "type": "Flag",
      "optional": true,
      "id": "xopts_overwrite",
      "name": "XOPTS Overwrite flag"
    },
    {
      "command-line-flag": "-termscript",
      "description": "Run script before exiting",
      "value-key": "[TERMSCRIPT_FILE]",
      "type": "File",
      "optional": true,
      "id": "termscript_file",
      "name": "Term Script File"
    },
    {
      "command-line-flag": "-mprage",
      "description": "Assume scan parameters are MGH MP-RAGE protocol",
      "value-key": "[MPRAGE_FLAG]",
      "type": "Flag",
      "optional": true,
      "id": "mprage",
      "name": "MPRAGE flag"
    },
    {
      "command-line-flag": "-washu_mprage",
      "description": "Assume scan parameters are Wash.U. MP-RAGE protocol",
      "value-key": "[WASHU_MPRAGE_FLAG]",
      "type": "Flag",
      "optional": true,
      "id": "washu_mprage",
      "name": "WashU MPRAGE flag"
    },
    {
      "command-line-flag": "-schwartzya3t-atlas",
      "description": "Use special young adult 3T atlas for tal reg",
      "value-key": "[SCHWARTZYA3T_ATLAS_FLAG]",
      "type": "Flag",
      "optional": true,
      "id": "schwartzya3t_atlas",
      "name": "Schwartzya 3T Atlas flag"
    },
    {
      "command-line-flag": "-threads",
      "description": "Set number of threads to use",
      "value-key": "[THREADS]",
      "type": "Number",
      "optional": true,
      "id": "threads",
      "name": "Threads"
    },
    {
      "command-line-flag": "-waitfor",
      "description": "Wait for file to appear before beginning",
      "value-key": "[WAITFOR_FILE]",
      "type": "File",
      "optional": true,
      "id": "waitfor_file",
      "name": "Wait for File"
    },
    {
      "command-line-flag": "-notify",
      "description": "Create this file after finishing",
      "value-key": "[NOTIFY_FILE]",
      "type": "File",
      "optional": true,
      "id": "notify_file",
      "name": "Notify File"
    },
    {
      "command-line-flag": "-log",
      "description": "Specify log file",
      "value-key": "[LOG_FILE]",
      "type": "File",
      "optional": true,
      "id": "log_file",
      "name": "Log File"
    },
    {
      "command-line-flag": "-status",
      "description": "Specify status file",
      "value-key": "[STATUS_FILE]",
      "type": "File",
      "optional": true,
      "id": "status_file",
      "name": "Status File"
    },
    {
      "command-line-flag": "-noappend",
      "description": "Start new log and status files instead of appending",
      "value-key": "[NOAPPEND_FLAG]",
      "type": "Flag",
      "optional": true,
      "id": "noappend",
      "name": "No Append flag"
    },
    {
      "command-line-flag": "-no-isrunning",
      "description": "Do not check whether this subject is currently being processed",
      "value-key": "[NO_ISRUNNING_FLAG]",
      "type": "Flag",
      "optional": true,
      "id": "no_isrunning",
      "name": "No Is Running flag"
    },
    {
      "command-line-flag": "-hippocampal-subfields-T1",
      "description": "Segmentation of hippocampal subfields using input T1 scan",
      "value-key": "[HIPPOCAMPAL_SUBFIELDS_T1_FLAG]",
      "type": "Flag",
      "optional": true,
      "id": "hippocampal_subfields_t1",
      "name": "Hippocampal Subfields T1 flag"
    },
    {
      "command-line-flag": "-hippocampal-subfields-T2",
      "description": "Segmentation using an additional scan and input T2 scan",
      "value-key": "[HIPPOCAMPAL_SUBFIELDS_T2_ID]",
      "type": "String",
      "optional": true,
      "id": "hippocampal_subfields_t2",
      "name": "Hippocampal Subfields T2"
    },
    {
      "command-line-flag": "-hippocampal-subfields-T1T2",
      "description": "Segmentation using additional scan and input T1",
      "value-key": "[HIPPOCAMPAL_SUBFIELDS_T1T2_ID]",
      "type": "String",
      "optional": true,
      "id": "hippocampal_subfields_t1t2",
      "name": "Hippocampal Subfields T1T2"
    },
    {
      "command-line-flag": "-brainstem-structures",
      "description": "Segmentation of brainstem structures",
      "value-key": "[BRAINSTEM_STRUCTURES_FLAG]",
      "type": "Flag",
      "optional": true,
      "id": "brainstem_structures",
      "name": "Brainstem Structures flag"
    },
    {
      "command-line-flag": "-sd",
      "description": "Specify subjects directory",
      "value-key": "[SD_DIR]",
      "type": "String",
      "optional": true,
      "id": "subjects_dir",
      "name": "Subjects Directory"
    },
    {
      "command-line-flag": "-mail",
      "description": "Mail user when done",
      "value-key": "[MAIL_USER]",
      "type": "String",
      "optional": true,
      "id": "mail_user",
      "name": "Mail User"
    },
    {
      "command-line-flag": "-umask",
      "description": "Set unix file permission mask",
      "value-key": "[UMASK]",
      "type": "String",
      "optional": true,
      "id": "umask",
      "name": "UMASK"
    },
    {
      "command-line-flag": "-grp",
      "description": "Check that current group is alpha group",
      "value-key": "[GRP_ID]",
      "type": "String",
      "optional": true,
      "id": "group_id",
      "name": "Group ID"
    },
    {
      "command-line-flag": "-onlyversions",
      "description": "Print version of each binary and exit",
      "value-key": "[ONLYVERSIONS_FLAG]",
      "type": "Flag",
      "optional": true,
      "id": "only_versions",
      "name": "Only Versions flag"
    },
    {
      "command-line-flag": "-debug",
      "description": "Print out lots of info",
      "value-key": "[DEBUG_FLAG]",
      "type": "Flag",
      "optional": true,
      "id": "debug",
      "name": "Debug flag"
    },
    {
      "command-line-flag": "-allowcoredump",
      "description": "Set coredump limit to unlimited",
      "value-key": "[ALLOW_COREDUMP_FLAG]",
      "type": "Flag",
      "optional": true,
      "id": "allow_coredump",
      "name": "Allow Core Dump flag"
    },
    {
      "command-line-flag": "-dontrun",
      "description": "Do everything but execute each command",
      "value-key": "[DONTRUN_FLAG]",
      "type": "Flag",
      "optional": true,
      "id": "dontrun",
      "name": "Don\u2019t Run flag"
    },
    {
      "command-line-flag": "-version",
      "description": "Print version of this script and exit",
      "value-key": "[VERSION_FLAG]",
      "type": "Flag",
      "optional": true,
      "id": "version",
      "name": "Version flag"
    },
    {
      "command-line-flag": "-help",
      "description": "Display help message and exit",
      "value-key": "[HELP_FLAG]",
      "type": "Flag",
      "optional": true,
      "id": "help",
      "name": "Help flag"
    }
  ],
  "output-files": [
    {
      "path-template": "[SUBJECT_ID]/scripts/recon-all.log",
      "description": "Log file of the recon-all process",
      "optional": true,
      "id": "logfile",
      "name": "Recon-all Log File"
    },
    {
      "path-template": "[SUBJECT_ID]/scripts/recon-all-status.log",
      "description": "Status file of the recon-all process",
      "optional": true,
      "id": "statusfile",
      "name": "Recon-all Status File"
    }
  ],
  "url": "https://github.com/freesurfer/freesurfer"
}