{
  "tool-version": "7.4.1",
  "name": "mri_info",
  "author": "FreeSurfer Developers",
  "description": "FreeSurfer is a software package for the analysis and visualization of neuroimaging data from cross-sectional and longitudinal studies. It is developed by the Laboratory for Computational Neuroimaging at the Martinos Center for Biomedical Imaging.\n\nFreeSurfer provides full processing streams for structural and functional MRI and includes tools for linear and nonlinear registration, cortical and subcortical segmentation, cortical surface reconstruction, statistical analysis of group morphometry, diffusion MRI, PET analysis, and much more. It is also the structural MRI analysis software of choice for the Human Connectome Project.",
  "command-line": "mri_info [INPUT1] [INPUT2] [CONFORMED_FLAG] [CONFORMED_TO_MIN_FLAG] [IS_1MM_ISO_FLAG] [TYPE_FLAG] [TR_FLAG] [TE_FLAG] [TI_FLAG] [FA_FLAG] [PEDIR_FLAG] [RES_FLAG] [CRES_FLAG] [RRES_FLAG] [SRES_FLAG] [VOXVOL_FLAG] [VOXVOLSUM_FLAG] [NCOLS_FLAG] [NROWS_FLAG] [NSLICES_FLAG] [DIM_FLAG] [CDC_FLAG] [RDC_FLAG] [SDC_FLAG] [VOX2RAS_FLAG] [RAS2VOX_FLAG] [VOX2RAS_TKR_FLAG] [RAS2VOX_TKR_FLAG] [VOX2RAS_FSL_FLAG] [TKR2SCANNER_FLAG] [SCANNER2TKR_FLAG] [RAS_GOOD_FLAG] [CRAS_FLAG] [CENTER_FLAG] [ZERO_CRAS_FLAG] [P0_FLAG] [DET_FLAG] [DOF_FLAG] [NFRAMES_FLAG] [MID_FRAME_FLAG] [FORMAT_FLAG] [ORIENTATION_FLAG] [SLICEDIRECTION_FLAG] [AUTOALIGN_FLAG] [CTAB_FLAG] [CMDS_FLAG] [DUMP_FLAG] [VOXEL_CRS_FLAG] [ENTROPY_FLAG] [OUTPUT_FILE] [ORIG_RAS2VOX_FLAG] [IN_TYPE]",
  "schema-version": "0.5",
  "inputs": [
    {
      "description": "Primary input file",
      "value-key": "[INPUT1]",
      "type": "File",
      "optional": false,
      "id": "input1",
      "name": "Input file 1"
    },
    {
      "description": "Secondary input file (optional)",
      "value-key": "[INPUT2]",
      "type": "File",
      "optional": true,
      "id": "input2",
      "name": "Input file 2"
    },
    {
      "command-line-flag": "--conformed",
      "description": "Print whether a volume is conformed",
      "value-key": "[CONFORMED_FLAG]",
      "type": "Flag",
      "optional": true,
      "id": "conformed",
      "name": "Conformed flag"
    },
    {
      "command-line-flag": "--conformed-to-min",
      "description": "Print whether a volume is conformed-to-min",
      "value-key": "[CONFORMED_TO_MIN_FLAG]",
      "type": "Flag",
      "optional": true,
      "id": "conformed_to_min",
      "name": "Conformed to min flag"
    },
    {
      "command-line-flag": "--is-1mm-iso",
      "description": "Print whether the voxel size is 1mm isotropic",
      "value-key": "[IS_1MM_ISO_FLAG]",
      "type": "Flag",
      "optional": true,
      "id": "is_1mm_iso",
      "name": "1mm isometric voxel size flag"
    },
    {
      "command-line-flag": "--type",
      "description": "Print the voxel type/precision",
      "value-key": "[TYPE_FLAG]",
      "type": "Flag",
      "optional": true,
      "id": "type",
      "name": "Voxel type flag"
    },
    {
      "command-line-flag": "--tr",
      "description": "Print TR",
      "value-key": "[TR_FLAG]",
      "type": "Flag",
      "optional": true,
      "id": "tr",
      "name": "TR flag"
    },
    {
      "command-line-flag": "--te",
      "description": "Print TE",
      "value-key": "[TE_FLAG]",
      "type": "Flag",
      "optional": true,
      "id": "te",
      "name": "TE flag"
    },
    {
      "command-line-flag": "--ti",
      "description": "Print TI",
      "value-key": "[TI_FLAG]",
      "type": "Flag",
      "optional": true,
      "id": "ti",
      "name": "TI flag"
    },
    {
      "command-line-flag": "--fa",
      "description": "Print flip angle",
      "value-key": "[FA_FLAG]",
      "type": "Flag",
      "optional": true,
      "id": "fa",
      "name": "Flip angle flag"
    },
    {
      "command-line-flag": "--pedir",
      "description": "Print phase encode direction",
      "value-key": "[PEDIR_FLAG]",
      "type": "Flag",
      "optional": true,
      "id": "pedir",
      "name": "Phase encode direction flag"
    },
    {
      "command-line-flag": "--res",
      "description": "Print column, row, slice, and frame resolution",
      "value-key": "[RES_FLAG]",
      "type": "Flag",
      "optional": true,
      "id": "res",
      "name": "Resolution flag"
    },
    {
      "command-line-flag": "--cres",
      "description": "Print column voxel size",
      "value-key": "[CRES_FLAG]",
      "type": "Flag",
      "optional": true,
      "id": "cres",
      "name": "Column voxel size flag"
    },
    {
      "command-line-flag": "--rres",
      "description": "Print row voxel size",
      "value-key": "[RRES_FLAG]",
      "type": "Flag",
      "optional": true,
      "id": "rres",
      "name": "Row voxel size flag"
    },
    {
      "command-line-flag": "--sres",
      "description": "Print slice voxel size",
      "value-key": "[SRES_FLAG]",
      "type": "Flag",
      "optional": true,
      "id": "sres",
      "name": "Slice voxel size flag"
    },
    {
      "command-line-flag": "--voxvol",
      "description": "Print voxel volume",
      "value-key": "[VOXVOL_FLAG]",
      "type": "Flag",
      "optional": true,
      "id": "voxvol",
      "name": "Voxel volume flag"
    },
    {
      "command-line-flag": "--voxvolsum",
      "description": "Compute sum of all voxels times the voxel volume",
      "value-key": "[VOXVOLSUM_FLAG]",
      "type": "Flag",
      "optional": true,
      "id": "voxvolsum",
      "name": "Voxel volume sum flag"
    },
    {
      "command-line-flag": "--ncols",
      "description": "Print number of columns",
      "value-key": "[NCOLS_FLAG]",
      "type": "Flag",
      "optional": true,
      "id": "ncols",
      "name": "Number of columns flag"
    },
    {
      "command-line-flag": "--nrows",
      "description": "Print number of rows",
      "value-key": "[NROWS_FLAG]",
      "type": "Flag",
      "optional": true,
      "id": "nrows",
      "name": "Number of rows flag"
    },
    {
      "command-line-flag": "--nslices",
      "description": "Print number of slices",
      "value-key": "[NSLICES_FLAG]",
      "type": "Flag",
      "optional": true,
      "id": "nslices",
      "name": "Number of slices flag"
    },
    {
      "command-line-flag": "--dim",
      "description": "Print number of columns, rows, slices, and frames",
      "value-key": "[DIM_FLAG]",
      "type": "Flag",
      "optional": true,
      "id": "dim",
      "name": "Dimensions flag"
    },
    {
      "command-line-flag": "--cdc",
      "description": "Print column direction cosine (x_{r,a,s})",
      "value-key": "[CDC_FLAG]",
      "type": "Flag",
      "optional": true,
      "id": "cdc",
      "name": "Column direction cosine flag"
    },
    {
      "command-line-flag": "--rdc",
      "description": "Print row direction cosine (y_{r,a,s})",
      "value-key": "[RDC_FLAG]",
      "type": "Flag",
      "optional": true,
      "id": "rdc",
      "name": "Row direction cosine flag"
    },
    {
      "command-line-flag": "--sdc",
      "description": "Print slice direction cosine (z_{r,a,s})",
      "value-key": "[SDC_FLAG]",
      "type": "Flag",
      "optional": true,
      "id": "sdc",
      "name": "Slice direction cosine flag"
    },
    {
      "command-line-flag": "--vox2ras",
      "description": "Print the native/qform vox2ras matrix",
      "value-key": "[VOX2RAS_FLAG]",
      "type": "Flag",
      "optional": true,
      "id": "vox2ras",
      "name": "Vox2RAS matrix flag"
    },
    {
      "command-line-flag": "--ras2vox",
      "description": "Print the native/qform ras2vox matrix",
      "value-key": "[RAS2VOX_FLAG]",
      "type": "Flag",
      "optional": true,
      "id": "ras2vox",
      "name": "RAS2Vox matrix flag"
    },
    {
      "command-line-flag": "--vox2ras-tkr",
      "description": "Print the tkregister vox2ras matrix",
      "value-key": "[VOX2RAS_TKR_FLAG]",
      "type": "Flag",
      "optional": true,
      "id": "vox2ras_tkr",
      "name": "Vox2RAS TKR matrix flag"
    },
    {
      "command-line-flag": "--ras2vox-tkr",
      "description": "Print the tkregister ras2vox matrix",
      "value-key": "[RAS2VOX_TKR_FLAG]",
      "type": "Flag",
      "optional": true,
      "id": "ras2vox_tkr",
      "name": "RAS2Vox TKR matrix flag"
    },
    {
      "command-line-flag": "--vox2ras-fsl",
      "description": "Print the FSL/FLIRT vox2ras matrix",
      "value-key": "[VOX2RAS_FSL_FLAG]",
      "type": "Flag",
      "optional": true,
      "id": "vox2ras_fsl",
      "name": "Vox2RAS FSL matrix flag"
    },
    {
      "command-line-flag": "--tkr2scanner",
      "description": "Print tkrRAS-to-scannerRAS matrix",
      "value-key": "[TKR2SCANNER_FLAG]",
      "type": "Flag",
      "optional": true,
      "id": "tkr2scanner",
      "name": "TKR2Scanner matrix flag"
    },
    {
      "command-line-flag": "--scanner2tkr",
      "description": "Print scannerRAS-to-tkrRAS matrix",
      "value-key": "[SCANNER2TKR_FLAG]",
      "type": "Flag",
      "optional": true,
      "id": "scanner2tkr",
      "name": "Scanner2TKR matrix flag"
    },
    {
      "command-line-flag": "--ras_good",
      "description": "Print the ras_good_flag",
      "value-key": "[RAS_GOOD_FLAG]",
      "type": "Flag",
      "optional": true,
      "id": "ras_good",
      "name": "RAS good flag"
    },
    {
      "command-line-flag": "--cras",
      "description": "Print the RAS near the center of the volume",
      "value-key": "[CRAS_FLAG]",
      "type": "Flag",
      "optional": true,
      "id": "cras",
      "name": "CRAS flag"
    },
    {
      "command-line-flag": "--center",
      "description": "Print the RAS at the actual center of the volume",
      "value-key": "[CENTER_FLAG]",
      "type": "Flag",
      "optional": true,
      "id": "center",
      "name": "Center RAS flag"
    },
    {
      "command-line-flag": "--zero-cras",
      "description": "Zero the center ras",
      "value-key": "[ZERO_CRAS_FLAG]",
      "type": "Flag",
      "optional": true,
      "id": "zero_cras",
      "name": "Zero CRAS flag"
    },
    {
      "command-line-flag": "--p0",
      "description": "Print the RAS at voxel (0,0,0)",
      "value-key": "[P0_FLAG]",
      "type": "Flag",
      "optional": true,
      "id": "p0",
      "name": "P0 flag"
    },
    {
      "command-line-flag": "--det",
      "description": "Print the determinant of the vox2ras matrix",
      "value-key": "[DET_FLAG]",
      "type": "Flag",
      "optional": true,
      "id": "det",
      "name": "Determinant flag"
    },
    {
      "command-line-flag": "--dof",
      "description": "Print the degrees of freedom stored in the header",
      "value-key": "[DOF_FLAG]",
      "type": "Flag",
      "optional": true,
      "id": "dof",
      "name": "Degrees of freedom flag"
    },
    {
      "command-line-flag": "--nframes",
      "description": "Print the number of frames",
      "value-key": "[NFRAMES_FLAG]",
      "type": "Flag",
      "optional": true,
      "id": "nframes",
      "name": "Number of frames flag"
    },
    {
      "command-line-flag": "--mid-frame",
      "description": "Print the middle frame",
      "value-key": "[MID_FRAME_FLAG]",
      "type": "Flag",
      "optional": true,
      "id": "mid_frame",
      "name": "Middle frame flag"
    },
    {
      "command-line-flag": "--format",
      "description": "Print file format",
      "value-key": "[FORMAT_FLAG]",
      "type": "Flag",
      "optional": true,
      "id": "format",
      "name": "Format flag"
    },
    {
      "command-line-flag": "--orientation",
      "description": "Print orientation string (e.g., LPS, RAS, RPI)",
      "value-key": "[ORIENTATION_FLAG]",
      "type": "Flag",
      "optional": true,
      "id": "orientation",
      "name": "Orientation flag"
    },
    {
      "command-line-flag": "--slicedirection",
      "description": "Print primary slice direction (e.g., axial)",
      "value-key": "[SLICEDIRECTION_FLAG]",
      "type": "Flag",
      "optional": true,
      "id": "slicedirection",
      "name": "Slice direction flag"
    },
    {
      "command-line-flag": "--autoalign",
      "description": "Print auto align matrix (if it exists)",
      "value-key": "[AUTOALIGN_FLAG]",
      "type": "Flag",
      "optional": true,
      "id": "autoalign",
      "name": "Autoalign matrix flag"
    },
    {
      "command-line-flag": "--ctab",
      "description": "Print embedded color lookup table",
      "value-key": "[CTAB_FLAG]",
      "type": "Flag",
      "optional": true,
      "id": "ctab",
      "name": "Color lookup table flag"
    },
    {
      "command-line-flag": "--cmds",
      "description": "Print command-line provenance info",
      "value-key": "[CMDS_FLAG]",
      "type": "Flag",
      "optional": true,
      "id": "cmds",
      "name": "Commands flag"
    },
    {
      "command-line-flag": "--dump",
      "description": "Print FA, TR, TE, TI, etc",
      "value-key": "[DUMP_FLAG]",
      "type": "Flag",
      "optional": true,
      "id": "dump",
      "name": "Dump flag"
    },
    {
      "command-line-flag": "--voxel",
      "description": "Dump voxel value from column, row, slice (0-based, all frames)",
      "value-key": "[VOXEL_CRS_FLAG]",
      "type": "String",
      "optional": true,
      "id": "voxel_crs",
      "name": "Voxel column row slice",
      "list": true,
      "min-list-entries": 3,
      "max-list-entries": 3
    },
    {
      "command-line-flag": "--entropy",
      "description": "Compute and print entropy",
      "value-key": "[ENTROPY_FLAG]",
      "type": "Flag",
      "optional": true,
      "id": "entropy",
      "name": "Entropy flag"
    },
    {
      "command-line-flag": "--o",
      "description": "Print flagged results to file",
      "value-key": "[OUTPUT_FILE]",
      "type": "File",
      "optional": true,
      "id": "output_file",
      "name": "Output file"
    },
    {
      "command-line-flag": "--orig_ras2vox",
      "description": "Print orig Ras2Vox matrix if present",
      "value-key": "[ORIG_RAS2VOX_FLAG]",
      "type": "Flag",
      "optional": true,
      "id": "orig_ras2vox",
      "name": "Orig Ras2Vox matrix flag"
    },
    {
      "command-line-flag": "--in_type",
      "description": "Explicitly specify file type",
      "value-key": "[IN_TYPE]",
      "type": "String",
      "optional": true,
      "id": "in_type",
      "name": "Input type"
    }
  ],
  "container-image": {
    "type": "docker",
    "image": "freesurfer/freesurfer:7.4.1"
  },
  "url": "https://github.com/freesurfer/freesurfer"
}