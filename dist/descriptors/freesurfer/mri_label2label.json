{
  "name": "mri_label2label",
  "command-line": "/usr/local/freesurfer/bin/mri_label2label [SRC_LABEL] [TRG_LABEL] [ERODE] [OPEN] [CLOSE] [DILATE] [RING] [SRC_SUBJECT] [TRG_SUBJECT] [SUBJECT] [OUT_MASK] [OUT_STAT] [SAMPLE] [REG_METHOD] [USE_PATH_FILES] [HEMI] [SRC_HEMI] [TRG_HEMI] [SRC_ICO_ORDER] [TRG_ICO_ORDER] [DIRECT] [TRG_SURF] [SURF_REG] [SRC_SURF_REG] [TRG_SURF_REG] [SRC_SURF_REG_FILE] [TRG_SURF_REG_FILE] [PAINT] [DMINDMIN] [BARYFILL] [LABEL_CORTEX] [SURF_LABEL2MASK] [SRC_MASK] [SRC_MASK_SIGN] [SRC_MASK_FRAME] [XFM] [REG] [XFM_INVERT] [PROJ_ABS] [PROJ_FRAC] [SD] [NO_HASH] [NO_REV_MAP] [TO_SCANNER] [TO_TKR] [SCANNER]",
  "inputs": [
    {
      "command-line-flag": "--srclabel",
      "description": "Input label file",
      "value-key": "[SRC_LABEL]",
      "type": "File",
      "optional": false,
      "id": "src_label",
      "name": "Source Label"
    },
    {
      "command-line-flag": "--trglabel",
      "description": "Output label file",
      "value-key": "[TRG_LABEL]",
      "type": "String",
      "optional": false,
      "id": "trg_label",
      "name": "Target Label"
    },
    {
      "command-line-flag": "--erode",
      "description": "Erode the label N times before writing",
      "value-key": "[ERODE]",
      "type": "Number",
      "optional": true,
      "id": "erode",
      "name": "Erode"
    },
    {
      "command-line-flag": "--open",
      "description": "Open the label N times before writing",
      "value-key": "[OPEN]",
      "type": "Number",
      "optional": true,
      "id": "open",
      "name": "Open"
    },
    {
      "command-line-flag": "--close",
      "description": "Close the label N times before writing",
      "value-key": "[CLOSE]",
      "type": "Number",
      "optional": true,
      "id": "close",
      "name": "Close"
    },
    {
      "command-line-flag": "--dilate",
      "description": "Dilate the label N times before writing",
      "value-key": "[DILATE]",
      "type": "Number",
      "optional": true,
      "id": "dilate",
      "name": "Dilate"
    },
    {
      "command-line-flag": "--ring",
      "description": "Dilate the label N times then remove the original before writing",
      "value-key": "[RING]",
      "type": "Number",
      "optional": true,
      "id": "ring",
      "name": "Ring"
    },
    {
      "command-line-flag": "--srcsubject",
      "description": "Source subject",
      "value-key": "[SRC_SUBJECT]",
      "type": "String",
      "optional": true,
      "id": "src_subject",
      "name": "Source Subject"
    },
    {
      "command-line-flag": "--trgsubject",
      "description": "Target subject",
      "value-key": "[TRG_SUBJECT]",
      "type": "String",
      "optional": true,
      "id": "trg_subject",
      "name": "Target Subject"
    },
    {
      "command-line-flag": "--s",
      "description": "Use for both target and source",
      "value-key": "[SUBJECT]",
      "type": "String",
      "optional": true,
      "id": "subject",
      "name": "Subject"
    },
    {
      "command-line-flag": "--outmask",
      "description": "Save output label as a binary mask (surf only)",
      "value-key": "[OUT_MASK]",
      "type": "String",
      "optional": true,
      "id": "outmask",
      "name": "Output Mask"
    },
    {
      "command-line-flag": "--outstat",
      "description": "Save output label stat as a mask (surf only)",
      "value-key": "[OUT_STAT]",
      "type": "String",
      "optional": true,
      "id": "outstat",
      "name": "Output Stat"
    },
    {
      "command-line-flag": "--sample",
      "description": "Sample label onto surface",
      "value-key": "[SAMPLE]",
      "type": "String",
      "optional": true,
      "id": "sample",
      "name": "Sample"
    },
    {
      "command-line-flag": "--regmethod",
      "description": "Registration method (surface, volume)",
      "value-key": "[REG_METHOD]",
      "type": "String",
      "optional": true,
      "id": "regmethod",
      "name": "Registration Method"
    },
    {
      "command-line-flag": "--usepathfiles",
      "description": "Read from and write to a path file",
      "value-key": "[USE_PATH_FILES]",
      "type": "Flag",
      "optional": true,
      "id": "usepathfiles",
      "name": "Use Path Files"
    },
    {
      "command-line-flag": "--hemi",
      "description": "Hemisphere (lh or rh) (with surface)",
      "value-key": "[HEMI]",
      "type": "String",
      "optional": true,
      "id": "hemi",
      "name": "Hemisphere"
    },
    {
      "command-line-flag": "--srchemi",
      "description": "Source Hemisphere (lh or rh)",
      "value-key": "[SRC_HEMI]",
      "type": "String",
      "optional": true,
      "id": "src_hemi",
      "name": "Source Hemisphere"
    },
    {
      "command-line-flag": "--trghemi",
      "description": "Target Hemisphere (lh or rh)",
      "value-key": "[TRG_HEMI]",
      "type": "String",
      "optional": true,
      "id": "trg_hemi",
      "name": "Target Hemisphere"
    },
    {
      "command-line-flag": "--srcicoorder",
      "description": "When srcsubject=ico",
      "value-key": "[SRC_ICO_ORDER]",
      "type": "Number",
      "optional": true,
      "id": "src_ico_order",
      "name": "Source Ico Order"
    },
    {
      "command-line-flag": "--trgicoorder",
      "description": "When trgsubject=ico",
      "value-key": "[TRG_ICO_ORDER]",
      "type": "Number",
      "optional": true,
      "id": "trg_ico_order",
      "name": "Target Ico Order"
    },
    {
      "command-line-flag": "--direct",
      "description": "Use the [xyz] coords for src and trg surfaces to do direct lookup",
      "value-key": "[DIRECT]",
      "type": "String",
      "optional": true,
      "id": "direct",
      "name": "Direct"
    },
    {
      "command-line-flag": "--trgsurf",
      "description": "Get xyz from this surface (white)",
      "value-key": "[TRG_SURF]",
      "type": "String",
      "optional": true,
      "id": "trgsurf",
      "name": "Target Surface"
    },
    {
      "command-line-flag": "--surfreg",
      "description": "Surface registration (sphere.reg)",
      "value-key": "[SURF_REG]",
      "type": "String",
      "optional": true,
      "id": "surfreg",
      "name": "Surface Registration"
    },
    {
      "command-line-flag": "--srcsurfreg",
      "description": "Source surface registration (sphere.reg)",
      "value-key": "[SRC_SURF_REG]",
      "type": "String",
      "optional": true,
      "id": "srcsurfreg",
      "name": "Source Surface Registration"
    },
    {
      "command-line-flag": "--trgsurfreg",
      "description": "Target surface registration (sphere.reg)",
      "value-key": "[TRG_SURF_REG]",
      "type": "String",
      "optional": true,
      "id": "trgsurfreg",
      "name": "Target Surface Registration"
    },
    {
      "command-line-flag": "--srcsurfreg-file",
      "description": "Specify full path to source reg",
      "value-key": "[SRC_SURF_REG_FILE]",
      "type": "String",
      "optional": true,
      "id": "srcsurfreg_file",
      "name": "Source Surface Registration File"
    },
    {
      "command-line-flag": "--trgsurfreg-file",
      "description": "Specify full path to target reg",
      "value-key": "[TRG_SURF_REG_FILE]",
      "type": "String",
      "optional": true,
      "id": "trgsurfreg_file",
      "name": "Target Surface Registration File"
    },
    {
      "command-line-flag": "--paint",
      "description": "Map to closest vertex on source surfname if d < dmax",
      "value-key": "[PAINT]",
      "type": "String",
      "optional": true,
      "id": "paint",
      "name": "Paint"
    },
    {
      "command-line-flag": "--dmindmin",
      "description": "Bin mask with vertex of closest label point when painting",
      "value-key": "[DMINDMIN]",
      "type": "String",
      "optional": true,
      "id": "dmindmin",
      "name": "Dmindmin"
    },
    {
      "command-line-flag": "--baryfill",
      "description": "Fill with barycentric interpolation",
      "value-key": "[BARYFILL]",
      "type": "String",
      "optional": true,
      "id": "baryfill",
      "name": "Baryfill"
    },
    {
      "command-line-flag": "--label-cortex",
      "description": "Create a label like ?h.cortex.label",
      "value-key": "[LABEL_CORTEX]",
      "type": "String",
      "optional": true,
      "id": "label_cortex",
      "name": "Label Cortex"
    },
    {
      "command-line-flag": "--surf-label2mask",
      "description": "Convert a label to a binary mask",
      "value-key": "[SURF_LABEL2MASK]",
      "type": "String",
      "optional": true,
      "id": "surf_label2mask",
      "name": "Surface Label to Mask"
    },
    {
      "command-line-flag": "--srcmask",
      "description": "Source mask surfvalfile thresh <format>",
      "value-key": "[SRC_MASK]",
      "type": "String",
      "optional": true,
      "id": "srcmask",
      "name": "Source Mask"
    },
    {
      "command-line-flag": "--srcmasksign",
      "description": "Source mask sign (<abs>, pos, neg)",
      "value-key": "[SRC_MASK_SIGN]",
      "type": "String",
      "optional": true,
      "id": "srcmasksign",
      "name": "Source Mask Sign"
    },
    {
      "command-line-flag": "--srcmaskframe",
      "description": "Source mask frame number (0-based)",
      "value-key": "[SRC_MASK_FRAME]",
      "type": "Number",
      "optional": true,
      "id": "srcmaskframe",
      "name": "Source Mask Frame"
    },
    {
      "command-line-flag": "--xfm",
      "description": "Use xfm file instead of computing tal xfm",
      "value-key": "[XFM]",
      "type": "String",
      "optional": true,
      "id": "xfm",
      "name": "XFM File"
    },
    {
      "command-line-flag": "--reg",
      "description": "Use register.dat file instead of computing tal xfm",
      "value-key": "[REG]",
      "type": "String",
      "optional": true,
      "id": "reg",
      "name": "Reg File"
    },
    {
      "command-line-flag": "--xfm-invert",
      "description": "Invert xfm, or reg",
      "value-key": "[XFM_INVERT]",
      "type": "Flag",
      "optional": true,
      "id": "xfm_invert",
      "name": "XFM Invert"
    },
    {
      "command-line-flag": "--projabs",
      "description": "Project dist mm along surf normal",
      "value-key": "[PROJ_ABS]",
      "type": "String",
      "optional": true,
      "id": "projabs",
      "name": "Project Absolute"
    },
    {
      "command-line-flag": "--projfrac",
      "description": "Project frac of thickness along surf normal",
      "value-key": "[PROJ_FRAC]",
      "type": "String",
      "optional": true,
      "id": "projfrac",
      "name": "Project Fraction"
    },
    {
      "command-line-flag": "--sd",
      "description": "Use specified subjects directory",
      "value-key": "[SD]",
      "type": "String",
      "optional": true,
      "id": "sd",
      "name": "Subjects Directory"
    },
    {
      "command-line-flag": "--nohash",
      "description": "Don't use hash table when regmethod is surface",
      "value-key": "[NO_HASH]",
      "type": "Flag",
      "optional": true,
      "id": "nohash",
      "name": "No Hash"
    },
    {
      "command-line-flag": "--norevmap",
      "description": "Don't use reverse mapping when regmethod is surface",
      "value-key": "[NO_REV_MAP]",
      "type": "Flag",
      "optional": true,
      "id": "norevmap",
      "name": "No Reverse Map"
    },
    {
      "command-line-flag": "--to-scanner",
      "description": "Convert coords to scanner RAS prior to other operations",
      "value-key": "[TO_SCANNER]",
      "type": "String",
      "optional": true,
      "id": "to_scanner",
      "name": "To Scanner RAS"
    },
    {
      "command-line-flag": "--to-tkr",
      "description": "Convert coords to tkregister RAS prior to other operations",
      "value-key": "[TO_TKR]",
      "type": "String",
      "optional": true,
      "id": "to_tkr",
      "name": "To Tkregister RAS"
    },
    {
      "command-line-flag": "--scanner",
      "description": "Set output coordinate type to scanner",
      "value-key": "[SCANNER]",
      "type": "Flag",
      "optional": true,
      "id": "scanner",
      "name": "Scanner Coordinate"
    }
  ],
  "author": "FreeSurfer Developers",
  "description": "FreeSurfer is a software package for the analysis and visualization of neuroimaging data from cross-sectional and longitudinal studies. It is developed by the Laboratory for Computational Neuroimaging at the Martinos Center for Biomedical Imaging.\n\nFreeSurfer provides full processing streams for structural and functional MRI and includes tools for linear and nonlinear registration, cortical and subcortical segmentation, cortical surface reconstruction, statistical analysis of group morphometry, diffusion MRI, PET analysis, and much more. It is also the structural MRI analysis software of choice for the Human Connectome Project.",
  "tool-version": "7.4.1",
  "container-image": {
    "type": "docker",
    "image": "freesurfer/freesurfer:7.4.1"
  },
  "schema-version": "0.5",
  "url": "https://github.com/freesurfer/freesurfer"
}