
=== Output of 'mri_label2vol --help' ===

USAGE: mri_label2vol

   --o volid : output volume

     Possible inputs:
   --label labelid <--label labelid>  
   --annot annotfile : surface annotation file  
   --seg   segpath : segmentation
     --upsample USFactor: upsample seg by factor
     --resmm ResMM : upsample resolution (instead of USF)
     --ttype : use default tissue type info for seg
     --ttype+head : use default+head tissue type info for seg
     --new-aseg2vol : use new function (eventually will become default)
   --aparc+aseg  : use aparc+aseg.mgz in subjectdir as seg

   --temp tempvolid : output template volume

   --reg regmat : VolXYZ = R*LabelXYZ
   --regheader volid : label template volume (needed with --label or --annot)
       for --seg, use the segmentation volume
   --identity : set R=I
   --invertmtx : Invert the registration matrix

   --fillthresh thresh : between 0 and 1 (def 0)
   --labvoxvol voxvol : volume of each label point (def 1mm3)
   --proj type start stop delta
   --fill-ribbon

   --subject subjectid : needed with --proj or --annot
   --hemi hemi : needed with --proj or --annot
   --surf surface  : use surface instead of white

   --hits hitvolid : each frame is nhits for a label
   --label-stat statvol : map the label stats field into the vol
   --stat-thresh thresh : only use label point where stat > thresh
   --offset k : add k to segmentation numbers (good when 0 should not be ignored)
   --defects surf defectno.mgz voltemplate.mgz offset mergeflag <label>
     Creates a segmentation volume of the surface defects, eg, 
       mri_label2vol --defects surf/lh.orig surf/lh.defect_labels mri/orig.mgz    1000 0 mri/defects.mgz
       mri_label2vol --defects surf/rh.orig surf/rh.defect_labels mri/defects.mgz 2000 1 mri/defects.mgz
       If a label is included, it will be used to mask out defects outside of the label;
         defect numbers are not changed

   --native-vox2ras : use native vox2ras xform instead of tkregister-style
   --version : print version and exit
   --help 

7.4.1


Help Outline:
  - SUMMARY  
  - ARGUMENTS 
  - RESOLVING MULTI-LABEL AMBIGUITIES
  - CHECKING YOUR RESULTS
  - EXAMPLES
  - KNOWN BUGS
  - SEE ALSO

SUMMARY

Converts a label or a set of labels into a volume. For a single label,
the volume will be binary: 1 where the label is and 0 where it is not.
For multiple labels, the volume will be 0 where no labels were found
otherwise the value will the the label number. For a voxel to be
declared part of a label, it must have enough hits in the voxel and
it must have more hits than any other label.

ARGUMENTS

--label labelfile <--label labelfile>

Enter the name of the label file. For multiple labels, use multiple
--label flags. Labels can be created manually with tkmedit and
tksurfer or automatically from a subcortical segmentation or cortical
annotation. Labels are simple text files. The first line is a header.
Each following line contains data with 5 columns. The first column is
the vertex number of the label point. The next 3 columns are the X, Y,
and Z of the point. The last can be ignored. If the label is not a 
surface-based label, then the vertex number will be -1. Not with --annot
or --seg

--annot annotfile

FreeSurfer can perform automatic parcellation of the cortical surface,
the results of which are stored in an annotation file. This is a
binary file that assigns each surface vertex to a cortical area
designated by a unique number. These annotations can be converted to
separate labels using mri_annotation2label. These labels can then be
input to mri_label2vol using --label. Or, the annotation file can be
read in directly using --annot. The map of annotation numbers to 
annotation names can be found at FreeSurferColorLUT.txt 
in $FREESURFER_HOME. Not with --label or --seg.

--seg segpath

Path to input segmentation. A segmentation is a volume in which each voxel
is assigned a number indicating it's class. The output volume will keep
the same numbering. Voting is used to resolve multiple segs mapping to
a single output voxel. The registration in this case goes from the seg to
the template volume. Not with --label or --annot.

--temp tempvolid

Template volume. The output volume will have the same size and geometry
as the template. Template must have geometry information (ie, direction
cosines and voxel sizes). Required.

--reg regmatfile

tkregister-style registration matrix (see tkregister2 --help) which maps
the XYZ of the label to the XYZ of the template volume. If not specified,
then the identity is assumed.

--regheader labelvolume

Construct registration based on the header info between the template volume
and the labelvolume. The label should have been defined on labelvolume (or
its equivalent).

--identity

Use the identity matrix as the registration.

--fillthresh thresh

Relative threshold which the number hits in a voxel must exceed for
the voxel to be considered a candidate for membership in the label. A
'hit' is when a label point falls into a voxel. thresh is a value
between 0 and 1 indicating the fraction of the voxel volume that must
be filled by label points. The voxel volume is determined from the
template. It is assumed that the each label point represents a voxel
1mm3 in size (which can be changed with --labvoxvol). So, the actual
number of hits needed to exceed threshold is
thresh*TempVoxVol/LabVoxVol. The default value is 0, meaning that any
label point that falls into a voxel makes that voxel a candidate for
membership in the label.  Note: a label must also have the most hits
in the voxel before that voxel will actually be assigned to the label
in the volume. Note: the label voxel volume becomes a little ambiguous
for surface labels, particularly when they are 'filled in' with
projection.

--labvoxvol voxvol

Volume covered by each label point. Default is 1mm3. This only affects
the fill threshold (--fillthresh). Note: the label voxel volume
becomes a little ambiguous for surface labels, particularly when they
are projected.

--proj type start stop delta

Project the label along the surface normal. type can be abs or frac. 
abs means that the start, stop, and delta are measured in mm. frac
means that start, stop, and delta are relative to the thickness at
each vertex. The label definition is changed to fill in label
points in increments of delta from start to stop. Requires subject
and hemi in order to load in a surface and thickness. Uses the
white surface. The label MUST have been defined on the surface.

--subject subjectid

FREESURFER subject identifier. Needed when using --proj.

--hemi hemi

Hemisphere to use loading the surface for --proj. Legal values are
lh and rh.

--o volid

Single frame output volume in which each voxel will have the number of
the label to which it is assigned (or 0 for no label). The label
number is the order in which it appears on the command-line.  Takes
any format accepted by mri_convert (eg, nii, mgh, spm, analyze, bshort).

--hits hitvolid

Hit volume. This is a multi-frame volume, with one frame for each
label. The value at each voxel for a given frame is the number of hits
that voxel received for that label. This is mostly good as a debugging
tool, but you could use it to implement your own multi-label
arbitration routine. Or you could binarize to have each label
represented separately. Takes any format accepted by mri_convert (eg,
nii, spm, analyze, bshort, mgh). With --seg, this is a single frame volume
with the number of hits from the winning seg id.

--native-vox2ras

Use the 'native' voxel-to-RAS transform instead of the tkregister-style.
The 'native' vox2ras is what is stored with the volume (usually scanner)
This may be needed depending upon how the label was created (eg, with scuba).

--label-stat labelstatvol

Create a volume in which the value at a voxel is the label stat for that voxel.
Note: uses the value from last label point hit. Not recommended for multiple
labels.

RESOLVING MULTI-LABEL AMBIGUITIES

When there are multiple labels, it is possible that more than one
label will map to a single voxel in the output volume. When this
happens, the voxel is assigned to the label with the most label
points in that voxel. Note that the voxel must still pass the 
fill threshold test in order to be considered part of the label.

CHECKING YOUR RESULTS

It is very important to check that the conversion of the label to the
volume was done correctly. It may be that it is way off or it could be
off around the edges. This is particularly true for surface-based
labels or when converting a label to a low-resolution space.
To check the result, load the orig volume into tkmedit. The orig
volume should be in the label space. Load the mri_label2vol output
volume as an overlay; this makes the labeled voxels appear as
'activity'.  Finally, load the label itself. You should see the label
(in green) sitting on top of the 'activity' of the labeled volume.
See EXAMPLE 1 for an example.


EXAMPLES

1. Convert a label into a binary mask in the functional space; require
that a functional voxel be filled at least 50% by the label:

mri_label2vol 
  --label lh-avg_central_sulcus.label 
  --temp f.nii 
  --reg register.dat 
  --fillthresh .5 
  --o cent-lh.nii

To see how well the label is mapped into the functional volume, run

tkmedit bert orig 
  -overlay ./cent-lh.nii 
  -overlay-reg ./register.dat -fthresh .5 -fmid 1

Then load the label with File->Label->LoadLabel. The label should
overlap with the overlay. The overlap will not be perfect but it
should be very close.

2. Convert a surface label into a binary mask in the functional space.
Fill in all the cortical gray matter. Require that a functional voxel
be filled at least 30% by the label:

mri_label2vol 
  --label lh-avg_central_sulcus.label 
  --temp f.nii 
  --reg register.dat 
  --fillthresh .3 
  --proj frac 0 1 .1 
  --subject bert --hemi lh
  --o cent-lh.nii

3. Convert a surface label into a binary mask in the functional space.
Sample a 1mm ribbon 2mm below the gray/white surface. Do not require a 
fill threshold:

mri_label2vol 
  --label lh-avg_central_sulcus.label 
  --temp f.nii 
  --reg register.dat 
  --proj abs -3 -2 .1 
  --subject bert --hemi lh
  --o cent-lh.nii

4. Convert two labels into a volume in the same space as the labels:

mri_label2vol 
  --label lh-avg_central_sulcus.label 
  --label lh-avg_calcarine_sulcus.label 
  --temp $SUBJECTS_DIR/bert/orig
  --identity
  --o cent_calc.img

The voxels corresponding to lh-avg_central_sulcus.label will have a of 
value of 1 whereas those assigned to lh-avg_calcarine_sulcus.label will
have a value of 2.

KNOWN BUGS

1. Cannot convert surface labels with different hemispheres.



SEE ALSO

mri_label2label, mri_cor2label, mri_annotation2label, mri_mergelabels,
tkregister2, mri_convert, tkmedit, tksurfer.

http://surfer.nmr.mgh.harvard.edu/docs/tkmedit_guide.html
http://surfer.nmr.mgh.harvard.edu/docs/tksurfer_doc.html


=== Output of 'mri_label2vol -help' ===

ERROR: Option -help unknown
       Did you really mean --help ?

=== Output of 'mri_label2vol' (no arguments) ===

USAGE: mri_label2vol

   --o volid : output volume

     Possible inputs:
   --label labelid <--label labelid>  
   --annot annotfile : surface annotation file  
   --seg   segpath : segmentation
     --upsample USFactor: upsample seg by factor
     --resmm ResMM : upsample resolution (instead of USF)
     --ttype : use default tissue type info for seg
     --ttype+head : use default+head tissue type info for seg
     --new-aseg2vol : use new function (eventually will become default)
   --aparc+aseg  : use aparc+aseg.mgz in subjectdir as seg

   --temp tempvolid : output template volume

   --reg regmat : VolXYZ = R*LabelXYZ
   --regheader volid : label template volume (needed with --label or --annot)
       for --seg, use the segmentation volume
   --identity : set R=I
   --invertmtx : Invert the registration matrix

   --fillthresh thresh : between 0 and 1 (def 0)
   --labvoxvol voxvol : volume of each label point (def 1mm3)
   --proj type start stop delta
   --fill-ribbon

   --subject subjectid : needed with --proj or --annot
   --hemi hemi : needed with --proj or --annot
   --surf surface  : use surface instead of white

   --hits hitvolid : each frame is nhits for a label
   --label-stat statvol : map the label stats field into the vol
   --stat-thresh thresh : only use label point where stat > thresh
   --offset k : add k to segmentation numbers (good when 0 should not be ignored)
   --defects surf defectno.mgz voltemplate.mgz offset mergeflag <label>
     Creates a segmentation volume of the surface defects, eg, 
       mri_label2vol --defects surf/lh.orig surf/lh.defect_labels mri/orig.mgz    1000 0 mri/defects.mgz
       mri_label2vol --defects surf/rh.orig surf/rh.defect_labels mri/defects.mgz 2000 1 mri/defects.mgz
       If a label is included, it will be used to mask out defects outside of the label;
         defect numbers are not changed

   --native-vox2ras : use native vox2ras xform instead of tkregister-style
   --version : print version and exit
   --help 

7.4.1

