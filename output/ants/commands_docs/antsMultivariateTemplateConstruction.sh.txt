
=== Output of 'antsMultivariateTemplateConstruction.sh --help' ===

/opt/ants/bin/antsMultivariateTemplateConstruction.sh: illegal option -- -


=== Output of 'antsMultivariateTemplateConstruction.sh -help' ===



=== Output of 'antsMultivariateTemplateConstruction.sh' (no arguments) ===


Usage:

antsMultivariateTemplateConstruction.sh -d ImageDimension -o OUTPREFIX <other options> <images>

Compulsory arguments (minimal command line requires SGE cluster, otherwise use -c & -j options):

     -d:  ImageDimension: 2 or 3 (for 2 or 3 dimensional registration of single volume)
   ImageDimension: 4 (for template generation of time-series data)

     -o:  OUTPREFIX; A prefix that is prepended to all output files.

<images>  List of images in the current directory, eg *_t1.nii.gz. Should be at the end
          of the command.  Optionally, one can specify a .csv or .txt file where each
          line is the location of the input image.  One can also specify more than
          one file for each image for multi-modal template construction (e.g. t1 and t2).
          For the multi-modal case, the templates will be consecutively numbered (e.g.
          template0.nii.gz, template1.nii.gz, ...).

NB: All images to be added to the template should be in the same directory, and this script
should be invoked from that directory.

Optional arguments:

     -a   image statistic used to summarize images (default 1)
          0 = mean
          1 = mean of normalized intensities
          2 = median

          Normalization here means dividing each image by its mean intensity.

     -A   sharpening applied to template at each iteration (default 1)
          0 = none
          1 = Laplacian
          2 = Unsharp mask

     -c:  Control for parallel computation (default 1) -- 0 == run serially,  1 == SGE qsub,
          2 == use PEXEC (localhost), 3 == Apple XGrid, 4 == PBS qsub, 5 == SLURM

     -g:  Gradient step size (default 0.25) -- smaller in magnitude results in
          more cautious steps. Use smaller steps to refine template details.
          0.25 is an upper (aggressive) limit for this parameter.

     -i:  Iteration limit (default 4) -- iterations of the template construction (Iteration limit)*NumImages registrations.

     -j:  Number of cpu cores to use (default 2; -- requires "-c 2")

     -k:  Number of modalities used to construct the template (default 1)

     -w:  Modality weights used in the similarity metric (default = 1) --- specified as e.g. 1x0.5x0.75

     -m:  Max-iterations in each registration

     -n:  N4BiasFieldCorrection of moving image (default 1) -- 0 == off, 1 == on

     -p:  Commands to prepend to job scripts (e.g., change into appropriate directory, set paths, etc)

     -r:  Do rigid-body registration of inputs to the initial template, before doing the main
          pairwise registration. 0 == off 1 == on (default 0). If you are trying to refine or update
          an existing template, you would use '-r 0'.
          Rigid initialization is useful when you do not have an initial template, or you want to use
          a single image as a reference for rigid alignment only. For example,
            "-z tpl-MNI152NLin2009cAsym_res-01_T1w.nii.gz -y 0 -r 1"
          will rigidly align the inputs to the MNI template, and then use their average to begin the
          template building process.

     -s:  Type of similarity metric used for nonlinear registration (affine is always MI). Default = CC.
          Options are case sensitive.
             CC  : Cross-correlation
             MI  : Mutual information
             MSQ : Mean squared differences
             PR  : CC after subtraction of local mean from the image (deprecated)

     -t:  Type of transformation model used for nonlinear registration. Options are case sensitive.
             GR             : Greedy SyN (default for scalar data)
             GR_Constrained : Greedy SyN with regularization on the total deformation (default for time series)
             EL             : Elastic
             EX             : Exponential
             DD             : Greedy exponential, diffemorphic-demons-style optimization
             SY             : LDDMM-style SyN with symmetric time-dependent gradient estimation
             LDDMM          : Like SY, but with asymmetric time-dependent gradient estimation
             S2             : Like SY, but with no time-dependent gradient estimation

     -x:  XGrid arguments (e.g., -x "-p password -h controlhost")

     -y:  Update the template with the full affine transform (default 1). If 0, the rigid
          component of the affine transform will not be used to update the template. If your
          template drifts in translation or orientation try -y 0.

     -z:  Use this this volume as the target of all inputs. When not used, the script will create an unbiased
          starting point by averaging all inputs, then aligning the center of mass of all inputs to that of
          the initial average. If you do not use -z, it is recommended to use "-r 1". Use the full path.
          For multiple modalities, specify -z modality1.nii.gz -z modality2.nii.gz ...
          in the same modality order as the input images.

     -b:  Boolean for saving full iteration output to directories (default = 0). If 1, images and warps
          are saved for each pairwise registration at each iteration. Otherwise, only templates and the shape
          update warps are saved.

Example:

antsMultivariateTemplateConstruction.sh -d 3 -m 30x50x20 -t GR -s CC -c 1 -o MY -z InitialTemplate.nii.gz  *RF*T1x.nii.gz

- In this example 30x50x20 iterations per registration are used for template creation (that is the default)
- Greedy-SyN and CC are the metrics to guide the mapping.
- Output is prepended with MY and the initial template is InitialTemplate.nii.gz (optional).
- The -c option is set to 1, which will result in using the Sun Grid Engine (SGE) to distribute the computation.
- if you do not have SGE, read the help for multi-core computation on the local machine, or Apple X-grid options.

Output:

{OutputPrefix}template{m}.nii.gz
  final template for each modality m.

{OutputPrefix}template{m}{inputFile}{n}WarpedToTemplate.nii.gz
{OutputPrefix}template{m}{inputFile}{n}0GenericAffine.mat
{OutputPrefix}template{m}{inputFile}{n}1Warp.nii.gz
{OutputPrefix}template{m}{inputFile}{n}1InverseWarp.nii.gz
  each of n input images warped to the penultimate template m, with transforms. If the template has converged,
  these should be well aligned to {OutputPrefix}template{m}.nii.gz.

intermediateTemplates/
                     initial_{OutputPrefix}template{m}.nii.gz :
                       initial template
                     initialRigid_{OutputPrefix}template{m}.nii.gz :
                       initial rigid template if requested with "-r 1"
                     {transform}_iteration{i}_{OutputPrefix}template{m}.nii.gz
                       Template computed with {transform} (-t) for each iteration (-i) and modality.
                     {transform}_iteration{i}_shapeUpdateWarp.nii.gz
                       Shape update warp applied to the template at iteration i. As the template converges,
                       the magnitude of the update warp will converge to a minimal value.


--------------------------------------------------------------------------------------
ANTS was created by:
--------------------------------------------------------------------------------------
Brian B. Avants, Nick Tustison and Gang Song
Penn Image Computing And Science Laboratory
University of Pennsylvania

Please reference http://www.ncbi.nlm.nih.gov/pubmed/20851191 when employing this script
in your studies. A reproducible evaluation of ANTs similarity metric performance in
brain image registration:

* Avants BB, Tustison NJ, Song G, Cook PA, Klein A, Gee JC. Neuroimage, 2011.

Also see http://www.ncbi.nlm.nih.gov/pubmed/19818860 for more details.

The script has been updated and improved since this publication.

--------------------------------------------------------------------------------------
script adapted by N.M. van Strien, http://www.mri-tutorial.com | NTNU MR-Center
multivariate template adaption by Nick Tustison
--------------------------------------------------------------------------------------
Apple XGrid support by Craig Stark
--------------------------------------------------------------------------------------

