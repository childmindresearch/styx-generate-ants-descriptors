
=== Output of 'antsApplyTransforms --help' ===


COMMAND: 
     antsApplyTransforms
          antsApplyTransforms, applied to an input image, transforms it according to a 
          reference image and a transform (or a set of transforms). 

OPTIONS: 
     -d, --dimensionality 2/3/4
          Sets the dimensionality of transforms and scalar inputs.dimensional image. This 
          will be the same dimension as used in antsRegistration. This does not change for 
          multi-valued inputs, use the -e option for time series and other multi-component 
          images. 

     -e, --input-image-type 0/1/2/3/4/5
                            scalar/vector/tensor/time-series/multichannel/five-dimensional
          Option specifying the input image type of scalar (default), vector, tensor, time 
          series, or multi-channel. A time series image is a scalar image defined by an 
          additional dimension for the time component whereas a multi-channel image is a 
          vector image with only spatial dimensions. Five-dimensionalimages are e.g., AFNI 
          stats image. 
          <VALUES>: 0

     -i, --input inputFileName
          Currently, the only input objects supported are image objects. However, the 
          current framework allows for warping of other objects such as meshes and point 
          sets. 

     -r, --reference-image imageFileName
          For warping input images, the reference image defines the spacing, origin, size, 
          and direction of the output warped image. 

     -o, --output warpedOutputFileName
                  [warpedOutputFileName or compositeDisplacementField,<printOutCompositeWarpFile=0>]
                  Linear[genericAffineTransformFile,<calculateInverse=0>]
          One can either output the warped image or, if the boolean is set, one can print 
          out the displacement field based on the composite transform and the reference 
          image. A third option is to compose all affine transforms and (if boolean is 
          set) calculate its inverse which is then written to an ITK file. 

     -n, --interpolation Linear
                         NearestNeighbor
                         MultiLabel[<sigma=imageSpacing>,<alpha=4.0>]
                         Gaussian[<sigma=imageSpacing>,<alpha=1.0>]
                         BSpline[<order=3>]
                         CosineWindowedSinc
                         WelchWindowedSinc
                         HammingWindowedSinc
                         LanczosWindowedSinc
                         GenericLabel[<interpolator=Linear>]
          Several interpolation options are available in ITK. These have all been made 
          available. 

     -u, --output-data-type char
                            uchar
                            short
                            int
                            float
                            double
                            default
          Output image data type. This is a direct typecast; output values are not 
          rescaled. Default is to use the internal data type (float or double). uchar is 
          unsigned char; others are signed. WARNING: Outputs will be incorrect 
          (overflowed/reinterpreted) if values exceed the range allowed by your choice. 
          Note that some pixel types are not supported by some image formats. e.g. int is 
          not supported by jpg. 

     -t, --transform transformFileName
                     [transformFileName,useInverse]
          Several transform options are supported including all those defined in the ITK 
          library in addition to a deformation field transform. The ordering of the 
          transformations follows the ordering specified on the command line. An identity 
          transform is pushed onto the transformation stack. Each new transform 
          encountered on the command line is also pushed onto the transformation stack. 
          Then, to warp the input object, each point comprising the input object is warped 
          first according to the last transform pushed onto the stack followed by the 
          second to last transform, etc. until the last transform encountered which is the 
          identity transform. Also, it should be noted that the inverse transform can be 
          accommodated with the usual caveat that such an inverse must be defined by the 
          specified transform class 

     -f, --default-value value
          Default voxel value to be used with input images only. Specifies the voxel value 
          when the input point maps outside the output domain. With tensor input images, 
          specifies the default voxel eigenvalues. 

     -z, --static-cast-for-R value
          forces static cast in ReadTransform (for R) 

     --float 
          Use 'float' instead of 'double' for computations. 
          <VALUES>: 0

     -v, --verbose (0)/1
          Verbose output. 

     -h 
          Print the help menu (short version). 

     --help 
          Print the help menu. 
          <VALUES>: 1


=== Output of 'antsApplyTransforms -help' ===

ERROR:  Invalid flag provided he
ERROR:  Invalid command line flags found! Aborting execution.

=== Output of 'antsApplyTransforms' (no arguments) ===


COMMAND: 
     antsApplyTransforms
          antsApplyTransforms, applied to an input image, transforms it according to a 
          reference image and a transform (or a set of transforms). 

OPTIONS: 
     -d, --dimensionality 2/3/4
          Sets the dimensionality of transforms and scalar inputs.dimensional image. This 
          will be the same dimension as used in antsRegistration. This does not change for 
          multi-valued inputs, use the -e option for time series and other multi-component 
          images. 

     -e, --input-image-type 0/1/2/3/4/5
                            scalar/vector/tensor/time-series/multichannel/five-dimensional
          Option specifying the input image type of scalar (default), vector, tensor, time 
          series, or multi-channel. A time series image is a scalar image defined by an 
          additional dimension for the time component whereas a multi-channel image is a 
          vector image with only spatial dimensions. Five-dimensionalimages are e.g., AFNI 
          stats image. 
          <VALUES>: 0

     -i, --input inputFileName
          Currently, the only input objects supported are image objects. However, the 
          current framework allows for warping of other objects such as meshes and point 
          sets. 

     -r, --reference-image imageFileName
          For warping input images, the reference image defines the spacing, origin, size, 
          and direction of the output warped image. 

     -o, --output warpedOutputFileName
                  [warpedOutputFileName or compositeDisplacementField,<printOutCompositeWarpFile=0>]
                  Linear[genericAffineTransformFile,<calculateInverse=0>]
          One can either output the warped image or, if the boolean is set, one can print 
          out the displacement field based on the composite transform and the reference 
          image. A third option is to compose all affine transforms and (if boolean is 
          set) calculate its inverse which is then written to an ITK file. 

     -n, --interpolation Linear
                         NearestNeighbor
                         MultiLabel[<sigma=imageSpacing>,<alpha=4.0>]
                         Gaussian[<sigma=imageSpacing>,<alpha=1.0>]
                         BSpline[<order=3>]
                         CosineWindowedSinc
                         WelchWindowedSinc
                         HammingWindowedSinc
                         LanczosWindowedSinc
                         GenericLabel[<interpolator=Linear>]
          Several interpolation options are available in ITK. These have all been made 
          available. 

     -u, --output-data-type char
                            uchar
                            short
                            int
                            float
                            double
                            default
          Output image data type. This is a direct typecast; output values are not 
          rescaled. Default is to use the internal data type (float or double). uchar is 
          unsigned char; others are signed. WARNING: Outputs will be incorrect 
          (overflowed/reinterpreted) if values exceed the range allowed by your choice. 
          Note that some pixel types are not supported by some image formats. e.g. int is 
          not supported by jpg. 

     -t, --transform transformFileName
                     [transformFileName,useInverse]
          Several transform options are supported including all those defined in the ITK 
          library in addition to a deformation field transform. The ordering of the 
          transformations follows the ordering specified on the command line. An identity 
          transform is pushed onto the transformation stack. Each new transform 
          encountered on the command line is also pushed onto the transformation stack. 
          Then, to warp the input object, each point comprising the input object is warped 
          first according to the last transform pushed onto the stack followed by the 
          second to last transform, etc. until the last transform encountered which is the 
          identity transform. Also, it should be noted that the inverse transform can be 
          accommodated with the usual caveat that such an inverse must be defined by the 
          specified transform class 

     -f, --default-value value
          Default voxel value to be used with input images only. Specifies the voxel value 
          when the input point maps outside the output domain. With tensor input images, 
          specifies the default voxel eigenvalues. 

     -z, --static-cast-for-R value
          forces static cast in ReadTransform (for R) 

     --float 
          Use 'float' instead of 'double' for computations. 
          <VALUES>: 0

     -v, --verbose (0)/1
          Verbose output. 

     -h 
          Print the help menu (short version). 

     --help 
          Print the help menu. 

