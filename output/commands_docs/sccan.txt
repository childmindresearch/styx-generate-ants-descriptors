
COMMAND: 
     sccan
          A tool for sparse statistical analysis on images : scca, pscca (with options), 
          mscca. Can also convert an imagelist/mask pair to a binary matrix image. 

OPTIONS: 
     -h 
          Print the help menu (short version). 

     --help 
          Print the help menu (long version). 
          <VALUES>: 1

     -o, --output outputImage
          Output dependent on which option is called. 

     -p, --n_permutations 500
          Number of permutations to use in scca. 

     -s, --smoother 0
          Smoothing function for variates 

     -z, --row_sparseness 0
          Row sparseness - if (+) then keep values (+) otherwise allow +/- values --- 
          always L1 

     -i, --iterations 20
          Max iterations for scca optimization (min 20). 

     -n, --n_eigenvectors 2
          Number of eigenvectors to compute in scca/spca. 

     -r, --robustify 0
          rank-based scca 

     -c, --covering 0
          try to make the decomposition cover the whole domain, if possible 

     -g, --uselong 0
          use longitudinal formulation ( > 0 ) or not ( <= 0 ) 

     -l, --l1 0
          use l1 ( > 0 ) or l0 ( < 0 ) penalty, also sets gradient step size e.g. -l 0.5 ( 
          L1 ) , -l -0.5 (L0) will set 0.5 grad descent step for either penalty 

     --PClusterThresh 1
          cluster threshold on view P 

     --QClusterThresh 1
          cluster threshold on view Q 

     -e, --ridge_cca 0
          Ridge cca. 

     --initialization NA
          Initialization file list for Eigenanatomy - must also pass mask option 

     --initialization2 NA
          Initialization file list for SCCAN-Eigenanatomy - must also pass mask option 

     --mask NA
          Mask file for Eigenanatomy initialization 

     --mask2 NA
          Mask file for Eigenanatomy initialization 2 

     --partial-scca-option PminusRQ
          Choices for pscca: PQ, PminusRQ, PQminusR, PminusRQminusR 

     --prior-weight 0.0
          Scalar value weight on prior between 0 (prior is weak) and 1 (prior is strong). 
          Only engaged if initialization is used. 

     --get-small 0.0
          Find smallest eigenvectors 

     -v, --verbose 0
          set whether output is verbose 

     --imageset-to-matrix [list.txt,mask.nii.gz]
          takes a list of image files names (one per line) and converts it to a 2D matrix 
          / image in binary or csv format depending on the filetype used to define the 
          output. 

     --timeseriesimage-to-matrix [four_d_image.nii.gz,three_d_mask.nii.gz, optional-spatial-smoothing-param-in-spacing-units-default-zero, optional-temporal-smoothing-param-in-time-series-units-default-zero  ]
          takes a timeseries (4D) image and converts it to a 2D matrix csv format as 
          output.If the mask has multiple labels ( more the one ) then the average time 
          series in each label will be computed and put in the csv. 

     --vector-to-image [vector.csv,three_d_mask.nii.gz, which-row-or-col ]
          converts the 1st column vector in a csv file back to an image --- currently 
          needs the csv file to have > 1 columns. if the number of entries in the column 
          does not equal the number of entries in the mask but the number of rows does 
          equal the number of entries in the mask, then it will convert the row vector to 
          an image. 

     --imageset-to-projections [list_projections.txt,list_images.txt, bool do-average-not-real-projection ]
          takes a list of image and projection files names (one per line) and writes them 
          to a csv file --- basically computing X*Y (matrices). 

     --scca two-view[matrix-view1.mhd,matrix-view2.mhd,mask1,mask2,FracNonZero1,FracNonZero2] 
            three-view[matrix-view1.mhd,matrix-view2.mhd,matrix-view3.mhd,mask1,mask2,mask3,FracNonZero1,FracNonZero2,FracNonZero3]
            partial[matrix-view1.mhd,matrix-view2.mhd,matrix-view3.mhd,mask1,mask2,mask3,FracNonZero1,FracNonZero2,FracNonZero3]
            dynsccan[matrix-view1.mhd,matrix-view2.mhd,mask1,mask2,FracNonZero1,FracNonZero2] 
          Matrix-based scca operations for 2 and 3 views.For all these options, the 
          FracNonZero terms set the fraction of variables to use in the estimate. E.g. if 
          one sets 0.5 then half of the variables will have non-zero values. If the 
          FracNonZero is (+) then the weight vectors must be positive. If they are 
          negative, weights can be (+) or (-). partial does partial scca for 2 views while 
          partialing out the 3rd view. 

     --svd sparse[matrix-view1.mhd,mask1,FracNonZero1,nuisance-matrix] --- will only use view1 ... unless nuisance matrix is specified.
           classic[matrix-view1.mhd,mask1,FracNonZero1,nuisance-matrix] --- will only use view1 ... unless nuisance matrix is specified.
           cgspca[matrix-view1.mhd,mask1,FracNonZero1,nuisance-matrix] --- will only use view1 ... unless nuisance matrix is specified, -i controls the number of sparse approximations per eigenvector, -n controls the number of eigenvectors.  total output will then be  i*n sparse eigenvectors.
           prior[ matrix.mha , mask.nii.gz , PriorList.txt , PriorScale.csv , PriorWeightIn0to1 , sparseness ] ... if sparseness is set to zero, we take sparseness from the priors.
           network[matrix-view1.mhd,mask1,FracNonZero1,guidance-matrix]
           lasso[matrix-view1.mhd,mask1,Lambda,guidance-matrix]
           recon[matrix-view1.mhd,mask1,FracNonZero1,nuisance-matrix]
           recon4d[matrix-view1.mhd,mask1,FracNonZero1,nuisance-matrix]
          a sparse svd implementation --- will report correlation of eigenvector with 
          original data columns averaged over columns with non-zero weights. 
